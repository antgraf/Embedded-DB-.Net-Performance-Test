<#@ template language="C#" #>
<#@ output extension = ".sql" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Data.Metadata.Edm" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Runtime.Remoting.Messaging" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
-- Created: <#=DateTime.Now.ToString("R")#>
<# 
	if (StoreItems == null)
	{
#>
-- No input.
<#
	}
	else
	{
 #>
-- Tables
<#

		IDictionary<string, string> additionalColumnComments = new Dictionary<string, string>();
		foreach (var entitySet in StoreItems.GetItems<EntityContainer>()[0].BaseEntitySets.OfType<EntitySet>())
		{
			additionalColumnComments.Clear();
#>
RECREATE TABLE <#=Quote(entitySet.Name)#> (
<#
			PushIndent("\t");
			foreach (EdmProperty property in entitySet.ElementType.Properties)
			{
#>
<#=GenerateColumn(property, ref additionalColumnComments)#>,
<#
			}
			PopIndent();
#>
CONSTRAINT <#=Quote("PK_" + entitySet.Name)#> PRIMARY KEY (<#=string.Join(", ", entitySet.ElementType.KeyMembers.Select(pk => Quote(pk.Name)).ToArray())#>)
);
<#
			foreach(string identity in entitySet.ElementType.KeyMembers.Where(pk => pk.TypeUsage.Facets.Contains("StoreGeneratedPattern") && (StoreGeneratedPattern)pk.TypeUsage.Facets["StoreGeneratedPattern"].Value == StoreGeneratedPattern.Identity).Select(i => i.Name))
			{
				additionalColumnComments.Add(identity, "#PK_GEN#");
			}
			foreach (KeyValuePair<string, string> comment in additionalColumnComments)
			{
#>
COMMENT ON COLUMN <#=Quote(entitySet.Name)#>.<#=Quote(comment.Key)#> IS '<#=comment.Value#>';
<#
			}
		}
#>
-- Foreign Key Constraints
<#
		foreach (var associationSet in StoreItems.GetItems<EntityContainer>()[0].BaseEntitySets.OfType<AssociationSet>())
		{
			ReferentialConstraint constraint = associationSet.ElementType.ReferentialConstraints.Single<ReferentialConstraint>(); 
			AssociationSetEnd end = associationSet.AssociationSetEnds[constraint.FromRole.Name];
			AssociationSetEnd end2 = associationSet.AssociationSetEnds[constraint.ToRole.Name];

#>
ALTER TABLE <#=Quote(end2.EntitySet.Name)#> ADD CONSTRAINT <#=Quote("FK_" + associationSet.Name)#> FOREIGN KEY (<#=string.Join(", ", constraint.ToProperties.Select(fk => Quote(fk.Name)).ToArray())#>)
REFERENCES <#=Quote(end.EntitySet.Name)#>(<#=string.Join(", ", constraint.FromProperties.Select(pk => Quote(pk.Name)).ToArray())#>)
ON DELETE <#=(end.CorrespondingAssociationEndMember.DeleteBehavior == OperationAction.Cascade ? "CASCADE" : "NO ACTION")#>
;

<#
		}
#>
<#
	}
#>
-- EOF
<#+
public StoreItemCollection StoreItemCollection { private get; set; }

private StoreItemCollection _storeItems;
private StoreItemCollection StoreItems
{
	get
	{
		if (_storeItems == null)
		{
			var ssdl = this.GetInput<string>("Ssdl");

			if (StoreItemCollection != null)
			{
				_storeItems = StoreItemCollection;
			}
			else if (ssdl != null)
			{
				 using (TextReader text = new StringReader(ssdl))
				 {
					using (XmlReader xml = XmlReader.Create(text))
					{
						_storeItems = new StoreItemCollection(new[] { xml });
					}
				}
			}
		}
		return _storeItems;
	}
}

private string Quote(string s)
{
	return "\"" + s + "\"";
}

private string GenerateColumn(EdmProperty property, ref IDictionary<string, string> columnComments)
{
	StringBuilder result = new StringBuilder();
	result.Append(Quote(property.Name));
	result.Append(" ");
	switch (property.TypeUsage.EdmType.Name)
	{
		case "varchar":
		case "char":
			result.Append(property.TypeUsage.EdmType.Name.ToUpperInvariant());
			result.AppendFormat("({0})", property.TypeUsage.Facets["MaxLength"].Value);
			break;
		case "decimal":
		case "numeric":
			result.Append(property.TypeUsage.EdmType.Name.ToUpperInvariant());
			result.AppendFormat("({0},{1})", property.TypeUsage.Facets["Precision"].Value, property.TypeUsage.Facets["Scale"].Value);
			break;
		case "clob":
			result.Append("BLOB SUB_TYPE TEXT");
			break;
		case "blob":
			result.Append("BLOB SUB_TYPE BINARY");
			break;
		case "smallint_bool":
			result.AppendFormat("SMALLINT CHECK ({0} IN (1,0))", Quote(property.Name));
			columnComments.Add(property.Name, "#BOOL#");
			break;
		case "guid":
			result.Append("CHAR(16) CHARACTER SET OCTETS");
			columnComments.Add(property.Name, "#GUID#");
			break;
		default:
			result.Append(property.TypeUsage.EdmType.Name.ToUpperInvariant());
			break;
	}
	if (!property.Nullable)
	{
	  result.Append(" NOT NULL");
	}
	return result.ToString();
}

/// <summary>
/// Retrieve data of type T from CallContext given a string-based identity.
/// This is used to pass data from a workflow into the template since the workflow
/// utilizes the VS TextTemplatingService which runs the template in a separate AppDomain.
/// </summary>
private T GetInput<T>(string identity) where T : class
{
    return CallContext.GetData(identity) as T;
}
#>